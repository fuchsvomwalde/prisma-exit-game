export const getBlankLineByTitle = (title: string) => {
  const titleWidth = title?.split("\n")?.at(0)?.length ?? 0;
  const blankLine = Array.from(Array(titleWidth).keys())
    .map(() => " ")
    .join("");

  return blankLine;
};

export const textToAsciArt = (text: string) => {
  const character_map: { [key: string]: string[] } = {
    a: [" █████ ", "██   ██", "███████", "██   ██", "██   ██"],
    b: ["██████ ", "██   ██", "██████ ", "██   ██", "██████ "],
    c: [" ██████", "██     ", "██     ", "██     ", " ██████"],
    d: ["██████ ", "██   ██", "██   ██", "██   ██", "██████ "],
    e: ["███████", "██     ", "█████  ", "██     ", "███████"],
    f: ["███████", "██     ", "█████  ", "██     ", "██     "],
    g: [" ██████ ", "██      ", "██   ███", "██    ██", " ██████ "],
    h: ["██   ██", "██   ██", "███████", "██   ██", "██   ██"],
    i: ["██", "██", "██", "██", "██"],
    j: ["     ██", "     ██", "     ██", "██   ██", " █████ "],
    k: ["██   ██", "██  ██ ", "█████  ", "██  ██ ", "██   ██"],
    l: ["█      ", "█      ", "█      ", "█      ", "███████"],
    m: ["███    ███", "████  ████", "██ ████ ██", "██  ██  ██", "██      ██"],
    n: ["███    ██", "████   ██", "██ ██  ██", "██  ██ ██", "██   ████"],
    o: [" ██████ ", "██    ██", "██    ██", "██    ██", " ██████ "],
    p: ["██████ ", "██   ██", "██████ ", "██     ", "██     "],
    q: [" ██████ ", "██    ██", "██    ██", "██ ▄▄ ██", " ██████ "],
    r: ["██████ ", "██   ██", "██████ ", "██   ██", "██   ██"],
    s: ["███████", "██     ", "███████", "     ██", "███████"],
    t: ["████████", "   ██   ", "   ██   ", "   ██   ", "   ██   "],
    u: ["██    ██", "██    ██", "██    ██", "██    ██", " ██████ "],
    v: ["██    ██", "██    ██", "██    ██", " ██  ██ ", "  ████  "],
    w: ["██     ██", "██     ██", "██  █  ██", "██ ███ ██", " ███ ███ "],
    x: ["██   ██", " ██ ██ ", "  ███  ", " ██ ██ ", "██   ██"],
    y: ["██    ██", " ██  ██ ", "  ████  ", "   ██   ", "   ██   "],
    z: ["███████", "   ███ ", "  ███  ", " ███   ", "███████"],
    0: [" ██████ ", "██  ████", "██ ██ ██", "████  ██", " ██████ "],
    1: [" ██", "███", " ██", " ██", " ██"],
    2: ["██████ ", "     ██", " █████ ", "██     ", "███████"],
    3: ["██████ ", "     ██", " █████ ", "     ██", "██████ "],
    4: ["██   ██", "██   ██", "███████", "     ██", "     ██"],
    5: ["███████", "██     ", "███████", "     ██", "███████"],
    6: [" ██████ ", "██      ", "███████ ", "██    ██", " ██████ "],
    7: ["███████", "     ██", "    ██ ", "   ██  ", "   ██  "],
    8: [" █████ ", "██   ██", " █████ ", "██   ██", " █████ "],
    9: [" █████ ", "██   ██", " ██████", "     ██", " █████ "],
    " ": [" ", " ", " ", " ", " "],
  };

  const rows = 5;

  let output: string[][] = [[], [], [], [], []];

  for (let row = 0; row < rows; row++) {
    for (let i = 0; i < text.length; i++) {
      const char = text.charAt(i).toLowerCase();
      const match = character_map[char];

      if (!match) {
        continue;
      }

      const copy = match[row];

      output[row].push(copy);
    }
  }

  return output.map((row) => row.join(" ")).join("\n");
};
